---
import Submission from './Submission.astro'
import type { Category } from "../utils/spell-compendium/data/categories";
import { getSubmissionsFromCategory } from "../utils/spell-compendium/category";

interface Props {
    category: Category
}

const { category } = Astro.props;

const submissions = getSubmissionsFromCategory(category);
---

<Fragment>
    {submissions.map(submission =>
        <Submission standalone={false} {...submission} />
    )}
</Fragment>

<script type="module">

    function showToast(message) {
        const toast = document.getElementById('toast');
        const body = toast.querySelector('.toast-body');
        body.textContent = message;

        toast.classList.remove('hidden');
        // Force reflow to allow animation restart
        void toast.offsetWidth;
        toast.classList.add('show');

        setTimeout(() => {
            toast.classList.remove('show');
            toast.classList.add('hidden');
        }, 2500);
    }

    // Function to copy the spell to the clipboard
    function copySpellToClipboard(event) {
        const button = event.target;
        const encoded = button.dataset.encoded; // Getting encoded spell data

        // Copy the encoded spell to clipboard
        navigator.clipboard.writeText(encoded).then(
            () => {
                console.log('Spell copied to clipboard!', encoded);
                showToast('Spell copied to clipboard!');
            }
        ).catch(err => {
            console.error("Clipboard write failed:", err);
            showToast('Failed to copy spell');
        });
    }

    // Add event listeners to buttons after the component is rendered
    document.querySelectorAll('.btn-outline-primary').forEach(button => {
        button.addEventListener('click', copySpellToClipboard);
    });
</script>
